---
description: Use assertions instead of optional chaining or default values when values should exist
globs: *.ts,*.tsx
alwaysApply: false
---

# TypeScript Assertion Standards

## Context
- Use when working with values that should always be present
- Applied in TypeScript and React files
- Particularly important when dealing with configuration, API responses, and required object properties

## Requirements
- Use `shouldBePresent()` when you expect a value to exist instead of default values
- Use `assertField()` when checking object properties instead of optional chaining
- Throw early and explicitly with clear error messages
- Avoid propagating invalid states that can cause subtle runtime errors
- Don't use assertions for truly optional values or external data you don't control

## Examples

<example>
// Asserting required configuration
const config = {
  apiKey: shouldBePresent(process.env.API_KEY, 'API_KEY'),
  baseUrl: shouldBePresent(process.env.BASE_URL, 'BASE_URL')
}
</example>

<example type="invalid">
// Using default values for required data
const config = {
  apiKey: process.env.API_KEY || '',
  baseUrl: process.env.BASE_URL ?? 'http://localhost'
}
</example>

<example>
// Asserting required values
const getUserName = (user: User) => {
  const profile = shouldBePresent(user.profile, 'user.profile')
  return shouldBePresent(profile.name, 'user.profile.name')
}
</example>

<example type="invalid">
// Optional chaining when value should exist
const getUserName = (user: User) => {
  return user?.profile?.name || 'Anonymous'
}
</example>

<example>
// Asserting required field
const getBalance = (account: Account) => {
  return assertField(account, 'balance')
}
</example>

<example type="invalid">
// Using default for required field
const getBalance = (account: Account) => {
  return account.balance ?? 0
}
</example>