---
description: USE object parameters WHEN writing functions with multiple parameters TO improve code maintainability
globs: *.ts,*.tsx
alwaysApply: false
---

# TypeScript Function Rules

## Context
- Apply when writing TypeScript functions with multiple parameters
- Applies to both function declarations and arrow function expressions
- Aims to improve code maintainability and readability

## Requirements
- Functions with more than 1 parameter must use an object parameter pattern
- Name input types with the pattern: `{FunctionName}Input`
- For single parameters, direct arguments are acceptable
- Object parameters should use destructuring in the function signature

## Examples
<example>
// Good: Using object parameter for multiple parameters
type UpdateNameInput = {
  id: string
  newName: string
}

const updateName = ({
  id,
  newName
}: UpdateNameInput) => {
  // ...
}
</example>

<example>
// Good: Single parameter uses direct argument
const getUser = (id: string) => {
  // ...
}
</example>

<example type="invalid">
// Bad: Multiple direct parameters
const updateName = (id: string, newName: string) => {
  // ...
}
</example>