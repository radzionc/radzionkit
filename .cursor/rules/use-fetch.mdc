---
description: Use Fetch API Instead of Axios
globs: *.ts,*.tsx
alwaysApply: false
---
 # Use Fetch API Instead of Axios

## Context
- Applies when making HTTP requests in JavaScript/TypeScript code
- Prefer using the built-in fetch API over external libraries like axios
- Reduces dependencies and bundle size
- Provides consistent error handling patterns

## Requirements
- Always use the built-in fetch API for HTTP requests
- Never use axios or other HTTP client libraries
- Handle fetch responses and errors appropriately
- Type error objects correctly when using TypeScript

## Examples
<example>
// Good: Using fetch API
async function fetchData(url: string) {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return await response.json();
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error(`Error fetching data: ${error.message}`);
    } else {
      console.error(`Unexpected error: ${String(error)}`);
    }
    throw error;
  }
}
</example>

<example type="invalid">
// Bad: Using axios
import axios from 'axios';

async function fetchData(url: string) {
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    console.error('Error fetching data:', error);
    throw error;
  }
}
</example>

<example>
// Good: POST request with fetch
async function postData(url: string, data: object) {
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  });
  
  if (!response.ok) {
    throw new Error(`HTTP error! Status: ${response.status}`);
  }
  
  return await response.json();
}
</example>

<example type="invalid">
// Bad: POST request with axios
import axios from 'axios';

async function postData(url: string, data: object) {
  const response = await axios.post(url, data);
  return response.data;
}
</example>