---
description: USE type WHEN defining object types TO maintain consistency
globs: *.ts,*.tsx
alwaysApply: false
---

# TypeScript Type Definition Rules

## Context
- When writing TypeScript code and defining data structures
- When creating contracts for class implementations
- When organizing complex type systems
- Ensures consistency and proper use of TypeScript features

## Requirements
- Use `type` for object type definitions instead of `interface`
- Use `type` for union types, intersection types, mapped types, and utility types
- Only use `interface` for contracts that will be implemented by classes
- Use `interface` for plugin systems and public APIs meant to be implemented

## Examples

<example>
// Using type for object type definition
type User = {
  id: string
  name: string
}
</example>

<example>
// Using interface for class contract
interface Repository {
  save(entity: unknown): Promise<void>
  find(id: string): Promise<unknown>
}

class PostgresRepository implements Repository {
  // Implementation...
}
</example>

<example>
// Using type for union types
type Status = 'loading' | 'success' | 'error'
</example>

<example type="invalid">
// Incorrect use of interface for simple object type
interface UserData {
  id: string
  name: string
}
</example> 