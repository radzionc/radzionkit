---
description: USE pattern matching WHEN implementing conditional logic TO avoid switch/case statements
globs: *.ts,*.tsx
alwaysApply: false
---
# Pattern Matching Rules

## Context
- Apply when implementing conditional logic based on discriminated unions, record types, or string literals
- Prefer pattern matching techniques over traditional switch/case statements and nested ternaries
- Improves type safety, readability, and maintainability

## Requirements
- Use Record or match function for simple union types
- Use Match component for conditional React component rendering
- Use matchRecordUnion for handling record union types
- Use matchDiscriminatedUnion for discriminated union patterns
- Never use switch/case statements when pattern matching alternatives exist
- Never use nested ternary operators when pattern matching alternatives exist

## Examples

<example>
// Using Record for value mapping
const animalSounds: Record<Animal, string> = {
  dog: 'woof',
  cat: 'meow'
}
const sound = animalSounds[animal]
</example>

<example>
// Using match function
const sound = match(animal, {
  dog: () => 'woof',
  cat: () => 'meow'
})
</example>

<example>
// Using Match component in React
<Match 
  value={status}
  loading={() => <LoadingSpinner />}
  error={() => <ErrorMessage />}
  success={() => <Content />}
/>
</example>

<example>
// Using matchRecordUnion
matchRecordUnion(shape, {
  circle: (radius) => Math.PI * radius * radius,
  rectangle: ({width, height}) => width * height
})
</example>

<example>
// Using matchDiscriminatedUnion
matchDiscriminatedUnion(
  action,
  'kind',
  'payload',
  {
    increment: (amount) => count + amount,
    decrement: (amount) => count - amount
  }
)
</example>

<example type="invalid">
// Avoid switch/case statements
switch (status) {
  case 'loading':
    return <Loading />
  case 'error':
    return <Error />
  default:
    return null
}
</example>

<example type="invalid">
// Avoid nested ternary operators
{status === 'loading' ? (
  <Loading />
) : status === 'error' ? (
  <Error />
) : (
  <Content />
)}
</example>

<example type="invalid">
// Avoid nested ternaries for value mapping
color={
  status === 'completed'
    ? 'contrast'
    : status === 'active'
      ? 'primary'
      : 'supporting'
}
</example>

<example type="valid">
// Instead, use Record for value mapping
const statusToColor: Record<Status, TextColor> = {
  completed: 'contrast',
  active: 'primary',
  pending: 'supporting'
}
color={statusToColor[status]}
</example>

<example type="valid">
// And use Match component for conditional rendering
<Match
  value={status}
  completed={() => <CheckIcon />}
  active={() => <Spinner />}
  pending={() => <div />}
/>
</example>